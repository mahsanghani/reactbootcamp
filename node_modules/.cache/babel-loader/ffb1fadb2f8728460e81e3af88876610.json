{"ast":null,"code":"import { useState, useEffect, useRef } from \"react\";\n\nfunction useHover() {\n  // Challenge:\n  // Keep track of hover state in this hook\n  // Create a couple of functions (enter, leave) that set the hovered\n  // state accordingly (true when entered, false when left)\n\n  /**\n   * Challenge:\n   *\n   * Using useEffect and useRef, make it so when this hook first loads,\n   * it sets up the \"mouseenter\" and \"mouseleave\" event listeners on the ref.\n   *\n   * Remember: the ref.current will represent the DOM node, which is where you can\n   * do imperative commands like `.addEventListener` and `removeEventListener`.\n   */\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef(null);\n\n  function enter() {\n    setHovered(true);\n  }\n\n  function leave() {\n    setHovered(false);\n  }\n\n  useEffect(() => {\n    ref.current.addEventListener(\"mouseenter\", enter);\n    ref.current.addEventListener(\"mouseleave\", leave);\n    return () => {\n      ref.current.removeEventListener(\"mouseenter\", enter);\n      ref.current.removeEventListener(\"mouseleave\", leave);\n    };\n  }, []);\n  return [hovered, ref];\n}\n\nexport default useHover;","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/ecommercesite/hooks/usehover.js"],"names":["useState","useEffect","useRef","useHover","hovered","setHovered","ref","enter","leave","current","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA;AAEA;AACA;;AAEA;;;;;;;;;AAUA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMM,GAAG,GAAGJ,MAAM,CAAC,IAAD,CAAlB;;AAEA,WAASK,KAAT,GAAiB;AACfF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD;;AAED,WAASG,KAAT,GAAiB;AACfH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAEDJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,GAAG,CAACG,OAAJ,CAAYC,gBAAZ,CAA6B,YAA7B,EAA2CH,KAA3C;AACAD,IAAAA,GAAG,CAACG,OAAJ,CAAYC,gBAAZ,CAA6B,YAA7B,EAA2CF,KAA3C;AAEA,WAAO,MAAM;AACXF,MAAAA,GAAG,CAACG,OAAJ,CAAYE,mBAAZ,CAAgC,YAAhC,EAA8CJ,KAA9C;AACAD,MAAAA,GAAG,CAACG,OAAJ,CAAYE,mBAAZ,CAAgC,YAAhC,EAA8CH,KAA9C;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT;AAUA,SAAO,CAACJ,OAAD,EAAUE,GAAV,CAAP;AACD;;AAED,eAAeH,QAAf","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nfunction useHover() {\n  // Challenge:\n  // Keep track of hover state in this hook\n\n  // Create a couple of functions (enter, leave) that set the hovered\n  // state accordingly (true when entered, false when left)\n\n  /**\n   * Challenge:\n   *\n   * Using useEffect and useRef, make it so when this hook first loads,\n   * it sets up the \"mouseenter\" and \"mouseleave\" event listeners on the ref.\n   *\n   * Remember: the ref.current will represent the DOM node, which is where you can\n   * do imperative commands like `.addEventListener` and `removeEventListener`.\n   */\n\n  const [hovered, setHovered] = useState(false);\n  const ref = useRef(null);\n\n  function enter() {\n    setHovered(true);\n  }\n\n  function leave() {\n    setHovered(false);\n  }\n\n  useEffect(() => {\n    ref.current.addEventListener(\"mouseenter\", enter);\n    ref.current.addEventListener(\"mouseleave\", leave);\n\n    return () => {\n      ref.current.removeEventListener(\"mouseenter\", enter);\n      ref.current.removeEventListener(\"mouseleave\", leave);\n    };\n  }, []);\n\n  return [hovered, ref];\n}\n\nexport default useHover;\n"]},"metadata":{},"sourceType":"module"}