{"ast":null,"code":"var _jsxFileName = \"/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js\";\n\n/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(5);\n\n  function handleChange(e) {\n    const {\n      value\n    } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArray = text.trim.split(\" \");\n    return wordsArray.filter(word => word !== \"\").length; // const filteredWords = wordsArray.filter(word => word !== \"\")\n    // return filteredWords.length\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"How fast do you type?\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleChange,\n    value: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Time remaining: \", timeRemaining), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => console.log(calculateWordCount(text)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Start!\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Word count: ???\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js"],"names":["React","useState","App","text","setText","timeRemaining","setTimeRemaining","handleChange","e","value","target","calculateWordCount","wordsArray","trim","split","filter","word","length","console","log"],"mappings":";;AAAA;;;;;;;;;;;;;AAaA;;;;;;AAOA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,CAAD,CAAlD;;AAEA,WAASM,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAN,IAAAA,OAAO,CAACK,KAAD,CAAP;AACD;;AAED,WAASE,kBAAT,CAA4BR,IAA5B,EAAiC;AAC7B,UAAMS,UAAU,GAAGT,IAAI,CAACU,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAnB;AACA,WAAOF,UAAU,CAACG,MAAX,CAAkBC,IAAI,IAAIA,IAAI,KAAK,EAAnC,EAAuCC,MAA9C,CAF6B,CAG7B;AACA;AACH;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE;AAAU,IAAA,QAAQ,EAAEV,YAApB;AAAkC,IAAA,KAAK,EAAEJ,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqBE,aAArB,CAHF,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAMa,OAAO,CAACC,GAAR,CAAYR,kBAAkB,CAACR,IAAD,CAA9B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALF,CADF;AASD;;AAED,eAAeD,GAAf","sourcesContent":["/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\n\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(5)\n\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text){\n      const wordsArray = text.trim.split(\" \")\n      return wordsArray.filter(word => word !== \"\").length\n      // const filteredWords = wordsArray.filter(word => word !== \"\")\n      // return filteredWords.length\n  }\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea onChange={handleChange} value={text} />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button onClick={() => console.log(calculateWordCount(text))}>Start!</button>\n      <h1>Word count: ???</h1>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}