{"ast":null,"code":"var _jsxFileName = \"/Users/ahsanghani/WebstormProjects/reactbootcamp/src/themecontext.js\";\nimport React, { Component } from \"react\";\nconst {\n  Provider,\n  Consumer\n} = React.createContext();\n\nclass ThemeContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      theme: \"light\"\n    };\n\n    this.toggleTheme = () => {\n      this.setState(prevState => {\n        return {\n          theme: prevState.theme === \"light\" ? \"dark\" : \"light\"\n        };\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Provider, {\n      value: \"light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport { ThemeContextProvider, Consumer as ThemeContextConsumer };","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/themecontext.js"],"names":["React","Component","Provider","Consumer","createContext","ThemeContextProvider","state","theme","toggleTheme","setState","prevState","render","props","children","ThemeContextConsumer"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,MAAM;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,IAAuBH,KAAK,CAACI,aAAN,EAA7B;;AAEA,MAAMC,oBAAN,SAAmCJ,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACzCK,KADyC,GACjC;AACJC,MAAAA,KAAK,EAAE;AADH,KADiC;;AAAA,SAKzCC,WALyC,GAK3B,MAAM;AAChB,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAM;AACFH,UAAAA,KAAK,EAAEG,SAAS,CAACH,KAAV,KAAoB,OAApB,GAA8B,MAA9B,GAAuC;AAD5C,SAAN;AAGH,OAJD;AAKH,KAXwC;AAAA;;AAazCI,EAAAA,MAAM,GAAE;AACJ,wBACI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKC,KAAL,CAAWC,QADhB,CADJ;AAKH;;AAnBwC;;AAsB7C,SAAQR,oBAAR,EAA8BF,QAAQ,IAAIW,oBAA1C","sourcesContent":["import React, {Component} from \"react\"\nconst {Provider, Consumer} = React.createContext()\n\nclass ThemeContextProvider extends Component {\n    state = {\n        theme: \"light\"\n    }\n\n    toggleTheme = () => {\n        this.setState(prevState => {\n            return{\n                theme: prevState.theme === \"light\" ? \"dark\" : \"light\"\n            }\n        })\n    }\n    \n    render(){\n        return(\n            <Provider value={\"light\"}>\n                {this.props.children}\n            </Provider>\n        )\n    }\n}\n\nexport {ThemeContextProvider, Consumer as ThemeContextConsumer}\n"]},"metadata":{},"sourceType":"module"}