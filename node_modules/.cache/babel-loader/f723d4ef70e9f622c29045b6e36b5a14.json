{"ast":null,"code":"var _jsxFileName = \"/Users/ahsanghani/WebstormProjects/reactbootcamp/src/themecontext.js\";\nimport React, { useState, Component } from \"react\";\nconst ThemeContext = React.createContext();\n/**\n * Challenge:\n * 1) Add state to hold the current theme\n * 2) Add a method for flipping the state between light and dark\n *\n */\n\n/**\n * Convert this ThemeContextProvider into a functional component that uses hooks\n * Tip: Use the browser dev tools if you run into a bug that isn't clear from the Scrimba console logs\n */\n\nfunction ThemeContextProvider(props) {\n  const [theme, setTheme] = useState(\"dark\");\n\n  function toggleTheme() {\n    setTheme(prevTheme => {\n      return prevTheme === \"light\" ? \"dark\" : \"light\";\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      theme: theme,\n      toggleTheme: toggleTheme\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, props.children);\n} // class ThemeContextProvider extends Component {\n//   state = {\n//     theme: \"dark\",\n//   };\n//\n//   toggleTheme = () => {\n//     this.setState((prevState) => {\n//       return {\n//         theme: prevState.theme === \"light\" ? \"dark\" : \"light\",\n//       };\n//     });\n//   };\n//\n//   render() {\n//     return (\n//       <ThemeContext.Provider\n//         value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n//       >\n//         {this.props.children}\n//       </ThemeContext.Provider>\n//     );\n//   }\n// }\n\n\nexport { ThemeContextProvider, ThemeContext };","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/themecontext.js"],"names":["React","useState","Component","ThemeContext","createContext","ThemeContextProvider","props","theme","setTheme","toggleTheme","prevTheme","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,EAArB;AAEA;;;;;;;AAOA;;;;;AAKA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,MAAD,CAAlC;;AAEA,WAASQ,WAAT,GAAuB;AACnBD,IAAAA,QAAQ,CAACE,SAAS,IAAI;AAClB,aAAOA,SAAS,KAAK,OAAd,GAAwB,MAAxB,GAAiC,OAAxC;AACH,KAFO,CAAR;AAGH;;AAED,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACH,MAAAA,KAAK,EAAEA,KAAR;AAAeE,MAAAA,WAAW,EAAEA;AAA5B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,KAAK,CAACK,QADX,CADJ;AAKH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASN,oBAAT,EAA+BF,YAA/B","sourcesContent":["import React, { useState, Component } from \"react\";\nconst ThemeContext = React.createContext();\n\n/**\n * Challenge:\n * 1) Add state to hold the current theme\n * 2) Add a method for flipping the state between light and dark\n *\n */\n\n/**\n * Convert this ThemeContextProvider into a functional component that uses hooks\n * Tip: Use the browser dev tools if you run into a bug that isn't clear from the Scrimba console logs\n */\n\nfunction ThemeContextProvider(props) {\n    const [theme, setTheme] = useState(\"dark\")\n\n    function toggleTheme() {\n        setTheme(prevTheme => {\n            return prevTheme === \"light\" ? \"dark\" : \"light\"\n        })\n    }\n\n    return (\n        <ThemeContext.Provider value={{theme: theme, toggleTheme: toggleTheme}}>\n            {props.children}\n        </ThemeContext.Provider>\n    )\n}\n\n// class ThemeContextProvider extends Component {\n//   state = {\n//     theme: \"dark\",\n//   };\n//\n//   toggleTheme = () => {\n//     this.setState((prevState) => {\n//       return {\n//         theme: prevState.theme === \"light\" ? \"dark\" : \"light\",\n//       };\n//     });\n//   };\n//\n//   render() {\n//     return (\n//       <ThemeContext.Provider\n//         value={{ theme: this.state.theme, toggleTheme: this.toggleTheme }}\n//       >\n//         {this.props.children}\n//       </ThemeContext.Provider>\n//     );\n//   }\n// }\n\nexport { ThemeContextProvider, ThemeContext };\n"]},"metadata":{},"sourceType":"module"}