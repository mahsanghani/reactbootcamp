{"ast":null,"code":"var _jsxFileName = \"/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js\";\n\n/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\n\n/**\n * Challenge:\n *\n * Create a function to calculate the number of separate words in the `text` state\n * For now, just console.log the word count when the button gets clicked to test it out.\n */\n\n/**\n * Challenge:\n *\n * 1. Create state to hold the current value of the countdown timer.\n *    Display this time in the \"Time Remaining\" header\n *\n * 2. Set up an effect that runs every time the `timeRemaining` changes\n *    The effect should wait 1 second, then decrement the `timeRemaining` by 1\n *\n *    Hint: use `setTimeout` instead of `setInterval`. This will help you avoid\n *    a lot of extra work.\n *\n *    Warning: there will be a bug in this, but we'll tackle that next\n *\n *    3. Make it so the effect won't run if the time is already at 0\n */\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(5);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n\n  function handleChange(e) {\n    const {\n      value\n    } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArray = text.trim.split(\" \");\n    return wordsArray.filter(word => word !== \"\").length; // const filteredWords = wordsArray.filter(word => word !== \"\")\n    // return filteredWords.length\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    }\n  }, [timeRemaining]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"How fast do you type?\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleChange,\n    value: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Time remaining: \", timeRemaining), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => console.log(calculateWordCount(text)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, \"Start!\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, \"Word count: ???\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js"],"names":["React","useState","useEffect","App","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","handleChange","e","value","target","calculateWordCount","wordsArray","trim","split","filter","word","length","setTimeout","time","console","log"],"mappings":";;AAAA;;;;;;;;;;;;;AAaA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;;;;;;;AAiBA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;;AAEA,WAASS,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAR,IAAAA,OAAO,CAACO,KAAD,CAAP;AACD;;AAED,WAASE,kBAAT,CAA4BV,IAA5B,EAAkC;AAChC,UAAMW,UAAU,GAAGX,IAAI,CAACY,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAnB;AACA,WAAOF,UAAU,CAACG,MAAX,CAAmBC,IAAD,IAAUA,IAAI,KAAK,EAArC,EAAyCC,MAAhD,CAFgC,CAGhC;AACA;AACD;;AAEDlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,aAAa,IAAIF,aAAa,GAAG,CAArC,EAAwC;AACtCe,MAAAA,UAAU,CAAC,MAAM;AACfd,QAAAA,gBAAgB,CAAEe,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAhB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GANQ,EAMN,CAAChB,aAAD,CANM,CAAT;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE;AAAU,IAAA,QAAQ,EAAEI,YAApB;AAAkC,IAAA,KAAK,EAAEN,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqBE,aAArB,CAHF,eAIE;AAAQ,IAAA,OAAO,EAAE,MAAMiB,OAAO,CAACC,GAAR,CAAYV,kBAAkB,CAACV,IAAD,CAA9B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAPF,CADF;AAWD;;AAED,eAAeD,GAAf","sourcesContent":["/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\n\n/**\n * Challenge:\n *\n * Create a function to calculate the number of separate words in the `text` state\n * For now, just console.log the word count when the button gets clicked to test it out.\n */\n\n/**\n * Challenge:\n *\n * 1. Create state to hold the current value of the countdown timer.\n *    Display this time in the \"Time Remaining\" header\n *\n * 2. Set up an effect that runs every time the `timeRemaining` changes\n *    The effect should wait 1 second, then decrement the `timeRemaining` by 1\n *\n *    Hint: use `setTimeout` instead of `setInterval`. This will help you avoid\n *    a lot of extra work.\n *\n *    Warning: there will be a bug in this, but we'll tackle that next\n *\n *    3. Make it so the effect won't run if the time is already at 0\n */\n\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(5);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArray = text.trim.split(\" \");\n    return wordsArray.filter((word) => word !== \"\").length;\n    // const filteredWords = wordsArray.filter(word => word !== \"\")\n    // return filteredWords.length\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1);\n      }, 1000);\n    }\n  }, [timeRemaining]);\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea onChange={handleChange} value={text} />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button onClick={() => console.log(calculateWordCount(text))}>\n        Start!\n      </button>\n      <h1>Word count: ???</h1>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}