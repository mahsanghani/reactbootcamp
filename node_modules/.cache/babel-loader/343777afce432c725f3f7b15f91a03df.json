{"ast":null,"code":"const redux = require(\"redux\");\n\nconst action = {\n  type: \"INCREMENT\"\n};\n\nfunction increment() {\n  return {\n    type: \"INCREMENT\"\n  };\n}\n\nconst initialState = {\n  count: 0\n}; // return new state based on the incoming action.type\n\n/**\n * Challenge:\n *\n * Enable the ability to double and halve the count.\n * If halving, round down instead of letting your count\n * become a decimal.\n */\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        count: state.count + 1\n      };\n\n    case \"DECREMENT\":\n      return {\n        count: state.count - 1\n      };\n\n    case \"DOUBLE\":\n      return {\n        count: state.count * 2\n      };\n\n    case \"HALF\":\n      return {\n        count: state.count / 2\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst store = redux.createStore(reducer);\nstore.subscribe(() => {\n  console.log(store.getState());\n});\nstore.dispatch({\n  type: \"INCREMENT\"\n});\nstore.dispatch({\n  type: \"INCREMENT\"\n});\nstore.dispatch({\n  type: \"DECREMENT\"\n});","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/index.js"],"names":["redux","require","action","type","increment","initialState","count","reducer","state","store","createStore","subscribe","console","log","getState","dispatch"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,IAAI,EAAE;AADO,CAAf;;AAIA,SAASC,SAAT,GAAqB;AACnB,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD;;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB,C,CAIA;;AAEA;;;;;;;;AAQA,SAASC,OAAT,CAAiBC,KAAK,GAAGH,YAAzB,EAAuCH,MAAvC,EAA+C;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AACLG,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AADhB,OAAP;;AAGF,SAAK,WAAL;AACE,aAAO;AACLA,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AADhB,OAAP;;AAGF,SAAK,QAAL;AACE,aAAO;AACLA,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AADhB,OAAP;;AAGF,SAAK,MAAL;AACE,aAAO;AACLA,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AADhB,OAAP;;AAGF;AACE,aAAOE,KAAP;AAlBJ;AAoBD;;AAED,MAAMC,KAAK,GAAGT,KAAK,CAACU,WAAN,CAAkBH,OAAlB,CAAd;AAEAE,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,QAAN,EAAZ;AACD,CAFD;AAIAL,KAAK,CAACM,QAAN,CAAe;AAAEZ,EAAAA,IAAI,EAAE;AAAR,CAAf;AACAM,KAAK,CAACM,QAAN,CAAe;AAAEZ,EAAAA,IAAI,EAAE;AAAR,CAAf;AACAM,KAAK,CAACM,QAAN,CAAe;AAAEZ,EAAAA,IAAI,EAAE;AAAR,CAAf","sourcesContent":["const redux = require(\"redux\");\n\nconst action = {\n  type: \"INCREMENT\",\n};\n\nfunction increment() {\n  return {\n    type: \"INCREMENT\",\n  };\n}\n\nconst initialState = {\n  count: 0,\n};\n\n// return new state based on the incoming action.type\n\n/**\n * Challenge:\n *\n * Enable the ability to double and halve the count.\n * If halving, round down instead of letting your count\n * become a decimal.\n */\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        count: state.count + 1,\n      };\n    case \"DECREMENT\":\n      return {\n        count: state.count - 1,\n      };\n    case \"DOUBLE\":\n      return {\n        count: state.count * 2,\n      };\n    case \"HALF\":\n      return {\n        count: state.count / 2,\n      };\n    default:\n      return state;\n  }\n}\n\nconst store = redux.createStore(reducer);\n\nstore.subscribe(() => {\n  console.log(store.getState());\n});\n\nstore.dispatch({ type: \"INCREMENT\" });\nstore.dispatch({ type: \"INCREMENT\" });\nstore.dispatch({ type: \"DECREMENT\" });\n"]},"metadata":{},"sourceType":"module"}