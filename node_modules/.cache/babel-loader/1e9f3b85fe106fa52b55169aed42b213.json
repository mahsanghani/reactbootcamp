{"ast":null,"code":"var _jsxFileName = \"/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js\";\n\n/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\n\n/**\n * Challenge:\n *\n * Create a function to calculate the number of separate words in the `text` state\n * For now, just console.log the word count when the button gets clicked to test it out.\n */\n\n/**\n * Challenge:\n *\n * 1. Create state to hold the current value of the countdown timer.\n *    Display this time in the \"Time Remaining\" header\n *\n * 2. Set up an effect that runs every time the `timeRemaining` changes\n *    The effect should wait 1 second, then decrement the `timeRemaining` by 1\n *\n *    Hint: use `setTimeout` instead of `setInterval`. This will help you avoid\n *    a lot of extra work.\n *\n *    Warning: there will be a bug in this, but we'll tackle that next\n *\n *    3. Make it so the effect won't run if the time is already at 0\n */\n\n/**\n * Challenge:\n *\n * Make it so clicking the Start button starts the timer instead of it starting on refresh\n * (Hint: use a new state variable to indicate if the game should be running or not)\n */\n\n/**\n * Challenge:\n *\n * When the timer reaches 0, count the number of words the user typed in\n * and display it in the \"Word count\" section\n *\n * After the game ends, make it so the user can click the Start button again\n * to play a second time\n */\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const STARTING_TIME = 5;\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n\n  function handleChange(e) {\n    const {\n      value\n    } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArray = text.trim().split(\" \");\n    return wordsArray.filter(word => word !== \"\").length; // const filteredWords = wordsArray.filter(word => word !== \"\")\n    // return filteredWords.length\n  }\n\n  function startGame() {\n    setIsTimeRunning(true);\n    setTimeRemaining(STARTING_TIME);\n    setText(\"\");\n  }\n\n  function endGame() {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(text));\n  } // https://www.google.com/search?q=Disable+button+in+react\n\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame(); // setIsTimeRunning(false)\n      // setWordCount(calculateWordCount(text))\n      // const numWords = calculateWordCount(text)\n      // setWordCount(numWords)\n    }\n  }, [timeRemaining, isTimeRunning]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"How fast do you type?\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleChange,\n    value: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"Time remaining: \", timeRemaining), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    disabled: isTimeRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Start!\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Word count: \", wordCount));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ahsanghani/WebstormProjects/reactbootcamp/src/App.js"],"names":["React","useState","useEffect","App","STARTING_TIME","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","handleChange","e","value","target","calculateWordCount","wordsArray","trim","split","filter","word","length","startGame","endGame","setTimeout","time"],"mappings":";;AAAA;;;;;;;;;;;;;AAaA;;;;;;;AAOA;;;;;;;AAOA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;AAOA;;;;;;;;;AAYA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,GAAT,GAAe;AACX,QAAMC,aAAa,GAAG,CAAtB;AAEF,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACM,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAACG,aAAD,CAAlD;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C;;AAEA,WAASY,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAYD,CAAC,CAACE,MAApB;AACAV,IAAAA,OAAO,CAACS,KAAD,CAAP;AACD;;AAED,WAASE,kBAAT,CAA4BZ,IAA5B,EAAkC;AAChC,UAAMa,UAAU,GAAGb,IAAI,CAACc,IAAL,GAAYC,KAAZ,CAAkB,GAAlB,CAAnB;AACA,WAAOF,UAAU,CAACG,MAAX,CAAmBC,IAAD,IAAUA,IAAI,KAAK,EAArC,EAAyCC,MAAhD,CAFgC,CAGhC;AACA;AACD;;AAED,WAASC,SAAT,GAAoB;AAChBd,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAF,IAAAA,gBAAgB,CAACJ,aAAD,CAAhB;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAED,WAASmB,OAAT,GAAkB;AACdf,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,IAAAA,YAAY,CAACK,kBAAkB,CAACZ,IAAD,CAAnB,CAAZ;AACH,GA7BY,CA+BX;;;AAEAH,EAAAA,SAAS,CAAC,MAAM;AAChB,QAAIO,aAAa,IAAIF,aAAa,GAAG,CAArC,EAAwC;AACtCmB,MAAAA,UAAU,CAAC,MAAM;AACflB,QAAAA,gBAAgB,CAAEmB,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAhB;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KAJD,MAIM,IAAGpB,aAAa,KAAK,CAArB,EAAuB;AACzBkB,MAAAA,OAAO,GADkB,CAEzB;AACA;AACA;AACA;AACH;AACF,GAZU,EAYR,CAAClB,aAAD,EAAgBE,aAAhB,CAZQ,CAAT;AAcF,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE;AAAU,IAAA,QAAQ,EAAEI,YAApB;AAAkC,IAAA,KAAK,EAAER,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqBE,aAArB,CAHF,eAII;AAAQ,IAAA,OAAO,EAAEiB,SAAjB;AAA4B,IAAA,QAAQ,EAAEf,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiBE,SAAjB,CATF,CADF;AAaD;;AAED,eAAeR,GAAf","sourcesContent":["/**\n * Challenge: build the basic structure of our game\n *\n * 1. <h1> title at the top\n * 2. <textarea> for the box to type in\n *      (tip: React normalizes <textarea /> to be more like <input />,\n *      so it can be used as a self-closing element and uses the `value` property\n *      to set its contents)\n * 3. <h4> ti display the amount of time remaining\n * 4. <button> to start the game\n * 5. Another <h1> to display the word count\n */\n\n/**\n * Challenge: Using hooks, track the state of the text in the textarea on every keystroke\n * To verify it's working, you could just console.log the state on every change\n *\n * https://scrimba.com/p/p7P5Hd/cW8Jdfy\n */\n\n/**\n * Challenge:\n *\n * Create a function to calculate the number of separate words in the `text` state\n * For now, just console.log the word count when the button gets clicked to test it out.\n */\n\n/**\n * Challenge:\n *\n * 1. Create state to hold the current value of the countdown timer.\n *    Display this time in the \"Time Remaining\" header\n *\n * 2. Set up an effect that runs every time the `timeRemaining` changes\n *    The effect should wait 1 second, then decrement the `timeRemaining` by 1\n *\n *    Hint: use `setTimeout` instead of `setInterval`. This will help you avoid\n *    a lot of extra work.\n *\n *    Warning: there will be a bug in this, but we'll tackle that next\n *\n *    3. Make it so the effect won't run if the time is already at 0\n */\n\n/**\n * Challenge:\n *\n * Make it so clicking the Start button starts the timer instead of it starting on refresh\n * (Hint: use a new state variable to indicate if the game should be running or not)\n */\n\n/**\n * Challenge:\n *\n * When the timer reaches 0, count the number of words the user typed in\n * and display it in the \"Word count\" section\n *\n * After the game ends, make it so the user can click the Start button again\n * to play a second time\n */\n\n\n\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n    const STARTING_TIME = 5\n\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0)\n\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArray = text.trim().split(\" \");\n    return wordsArray.filter((word) => word !== \"\").length;\n    // const filteredWords = wordsArray.filter(word => word !== \"\")\n    // return filteredWords.length\n  }\n\n  function startGame(){\n      setIsTimeRunning(true)\n      setTimeRemaining(STARTING_TIME)\n      setText(\"\")\n  }\n\n  function endGame(){\n      setIsTimeRunning(false)\n      setWordCount(calculateWordCount(text))\n  }\n\n    // https://www.google.com/search?q=Disable+button+in+react\n\n    useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1);\n      }, 1000);\n    }else if(timeRemaining === 0){\n        endGame()\n        // setIsTimeRunning(false)\n        // setWordCount(calculateWordCount(text))\n        // const numWords = calculateWordCount(text)\n        // setWordCount(numWords)\n    }\n  }, [timeRemaining, isTimeRunning]);\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea onChange={handleChange} value={text} />\n      <h4>Time remaining: {timeRemaining}</h4>\n        <button onClick={startGame} disabled={isTimeRunning}>Start!</button>\n      {/*<button onClick={() => setIsTimeRunning(true)}>Start!</button>*/}\n      {/*<button onClick={() => console.log(calculateWordCount(text))}>*/}\n      {/*  Start!*/}\n      {/*</button>*/}\n      <h1>Word count: {wordCount}</h1>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}